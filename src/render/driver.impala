// Driver functions ----------------------------------------------------------------

extern "C" {
    fn rodent_get_film_data(i32, &mut &mut [f32], &mut i32, &mut i32, bool) -> ();
    fn rodent_cpu_get_primary_stream(&mut PrimaryStream, i32) -> ();
    fn rodent_cpu_get_primary_income_stream(&mut PrimaryStream, i32) -> ();
    fn rodent_cpu_get_secondary_stream(&mut SecondaryStream, i32) -> ();
    fn rodent_cpu_get_secondary_income_stream(&mut SecondaryStream, i32) -> ();
    fn rodent_initial_gpu_host_data(i32) -> ();
    fn rodent_gpu_get_first_primary_stream(i32, &mut PrimaryStream, i32) -> ();
    fn rodent_gpu_get_second_primary_stream(i32, &mut PrimaryStream, i32) -> ();
    fn rodent_gpu_get_first_secondary_stream(i32, &mut SecondaryStream, i32) -> ();
    fn rodent_gpu_get_second_secondary_stream(i32, &mut SecondaryStream, i32) -> ();
    fn rodent_gpu_get_tmp_buffer(i32, &mut &mut [i32], i32) -> ();
    fn rodent_first_primary_save(i32, i32, i32, bool) -> i32;
    fn rodent_gpu_first_primary_load(i32, &mut PrimaryStream, i32) -> i32;
    fn rodent_load_buffer(i32, &[u8]) -> &[i8];
    fn rodent_load_bvh2_tri1(i32, &[u8], &mut &[Node2], &mut &[Tri1]) -> ();
    fn rodent_load_bvh4_tri4(i32, &[u8], &mut &[Node4], &mut &[Tri4]) -> ();
    fn rodent_load_bvh8_tri4(i32, &[u8], &mut &[Node8], &mut &[Tri4]) -> ();
    fn rodent_load_png(i32, &[u8], &mut &[u8], &mut i32, &mut i32) -> ();
    fn rodent_load_jpg(i32, &[u8], &mut &[u8], &mut i32, &mut i32) -> ();
    fn rodent_cpu_intersect_primary_embree(&PrimaryStream, i32, i32) -> ();
    fn rodent_cpu_intersect_secondary_embree(&SecondaryStream) -> ();
    fn rodent_present(i32) -> ();

    fn rodent_first_primary_check(i32, i32, i32, bool) -> ();
    fn rodent_secondary_check(i32, i32, i32, i32, bool) -> ();
    fn rodent_memory_check(i32) -> ();

    fn rodent_cpu_get_out_ray_stream(&mut OutRayStream, i32, bool) -> ();
    fn rodent_gpu_get_out_ray_stream(i32, &mut OutRayStream, i32, bool) -> ();

    fn rodent_get_render_chunk_hit(i32, &mut LightField) -> ();
    fn rodent_cpu_get_record_chunk_hit(&mut LightField, i32, bool) -> ();
    
    fn rodent_cpu_thread_num() -> i32;
    fn rodent_stream_logic_capacity() -> i32;
    fn rodent_stream_store_capacity() -> i32;
    fn rodent_out_stream_capacity() -> i32;
    fn rodent_chunk_hit_resolution() -> i32;

    fn rodent_worker_primary_send(i32, i32) -> ();    
    fn rodent_worker_secondary_send(i32, i32) -> ();    
    fn rodent_rays_export(i32, i32, i32, bool, bool, i32) -> i32; 
}

// Ray streams ---------------------------------------------------------------------

struct RayStream {
    id: &mut [i32], // this field is also used to indicate if the ray is alive
    org_x: &mut [f32],
    org_y: &mut [f32],
    org_z: &mut [f32],
    dir_x: &mut [f32],
    dir_y: &mut [f32],
    dir_z: &mut [f32],
    tmin: &mut [f32],
    tmax: &mut [f32],
}

struct PrimaryStream {
    rays: RayStream,
    next_chk: &mut [i32],
    org_chk: &mut [i32],
    geom_id: &mut [i32],
    prim_id: &mut [i32],
    t: &mut [f32],
    u: &mut [f32],
    v: &mut [f32],
    rnd: &mut [RndState],
    mis: &mut [f32],
    contrib_r: &mut [f32],
    contrib_g: &mut [f32],
    contrib_b: &mut [f32],
    depth: &mut [i32],
    size: i32
}

struct SecondaryStream {
    rays: RayStream,
    next_chk: &mut [i32],
    org_chk: &mut [i32],
    pri_chk: &mut [i32],
    prim_id: &mut [i32],
    color_r: &mut [f32],
    color_g: &mut [f32],
    color_b: &mut [f32],
    size: i32
}

struct OutRayStream {
    fptr: &mut [f32],
    iptr: &mut [i32],
    uiptr: &mut [RndState],
    width: i32,
    capacity: i32,
    size: i32
}

struct PreprocessRecord {
    its:    &mut[i32],  //chunk * depth
    time:   &mut[f32],
    length: i32,
    chunk:  i32
}

struct LightField {
    ctrb: &mut[i32],
    its:  &mut[i32],
    res:  i32,
    chk_cap: i32
}

fn @write_out_primary( primary: PrimaryStream
                     , out_buffer: OutRayStream
                     , src: i32
                     , dst: i32
                     , keep_hit: bool
                     ) -> () {
    let width = out_buffer.width;
    let dst_p = dst * width;
    out_buffer.iptr(dst_p)     = primary.rays.id(src);
    out_buffer.fptr(dst_p  + 1) = primary.rays.org_x(src);
    out_buffer.fptr(dst_p  + 2) = primary.rays.org_y(src);
    out_buffer.fptr(dst_p  + 3) = primary.rays.org_z(src);
    out_buffer.fptr(dst_p  + 4) = primary.rays.dir_x(src);
    out_buffer.fptr(dst_p  + 5) = primary.rays.dir_y(src);
    out_buffer.fptr(dst_p  + 6) = primary.rays.dir_z(src);
    out_buffer.fptr(dst_p  + 7) = primary.rays.tmin(src);
    out_buffer.fptr(dst_p  + 8) = primary.rays.tmax(src);
    out_buffer.iptr(dst_p  + 9) = primary.next_chk(src);
    out_buffer.iptr(dst_p  + 10) = primary.org_chk(src);
    out_buffer.uiptr(dst_p + 16) = primary.rnd(src);
    out_buffer.fptr(dst_p  + 17) = primary.mis(src);
    out_buffer.fptr(dst_p  + 18) = primary.contrib_r(src);
    out_buffer.fptr(dst_p  + 19) = primary.contrib_g(src);
    out_buffer.fptr(dst_p  + 20) = primary.contrib_b(src);
    out_buffer.iptr(dst_p  + 21) = primary.depth(src);
}

fn @write_out_secondary( secondary: SecondaryStream
                       , out_buffer: OutRayStream
                       , src: i32
                       , dst: i32
                       ) -> () {
    let width = out_buffer.width;
    out_buffer.iptr(dst * width)      = secondary.rays.id(src);
    out_buffer.fptr(dst * width + 1)  = secondary.rays.org_x(src);
    out_buffer.fptr(dst * width + 2)  = secondary.rays.org_y(src);
    out_buffer.fptr(dst * width + 3)  = secondary.rays.org_z(src);
    out_buffer.fptr(dst * width + 4)  = secondary.rays.dir_x(src);
    out_buffer.fptr(dst * width + 5)  = secondary.rays.dir_y(src);
    out_buffer.fptr(dst * width + 6)  = secondary.rays.dir_z(src);
    out_buffer.fptr(dst * width + 7)  = secondary.rays.tmin(src);
    out_buffer.fptr(dst * width + 8)  = secondary.rays.tmax(src);
    out_buffer.iptr(dst * width + 9)  = secondary.next_chk(src);
    out_buffer.iptr(dst * width + 10)  = secondary.org_chk(src);
    out_buffer.iptr(dst * width + 11)  = secondary.pri_chk(src);
    out_buffer.iptr(dst * width + 12) = secondary.prim_id(src);
    out_buffer.fptr(dst * width + 13) = secondary.color_r(src);
    out_buffer.fptr(dst * width + 14) = secondary.color_g(src);
    out_buffer.fptr(dst * width + 15) = secondary.color_b(src);
}

fn @copy_primary_ray( primary: PrimaryStream
                    , other_primary: PrimaryStream
                    , src_id: i32
                    , dst_id: i32
                    , keep_hit: bool
                    ) -> () {
    other_primary.rays.id(dst_id)    = primary.rays.id(src_id);
    other_primary.rays.org_x(dst_id) = primary.rays.org_x(src_id);
    other_primary.rays.org_y(dst_id) = primary.rays.org_y(src_id);
    other_primary.rays.org_z(dst_id) = primary.rays.org_z(src_id);
    other_primary.rays.dir_x(dst_id) = primary.rays.dir_x(src_id);
    other_primary.rays.dir_y(dst_id) = primary.rays.dir_y(src_id);
    other_primary.rays.dir_z(dst_id) = primary.rays.dir_z(src_id);
    other_primary.rays.tmin(dst_id)  = primary.rays.tmin(src_id);
    other_primary.rays.tmax(dst_id)  = primary.rays.tmax(src_id);
    other_primary.next_chk(dst_id)    = primary.next_chk(src_id);
    other_primary.org_chk(dst_id)    = primary.org_chk(src_id);
    if keep_hit {
        other_primary.geom_id(dst_id) = primary.geom_id(src_id);
        other_primary.prim_id(dst_id) = primary.prim_id(src_id);
        other_primary.t(dst_id)       = primary.t(src_id);
        other_primary.u(dst_id)       = primary.u(src_id);
        other_primary.v(dst_id)       = primary.v(src_id);
    }
    other_primary.rnd(dst_id)        = primary.rnd(src_id);
    other_primary.mis(dst_id)        = primary.mis(src_id);
    other_primary.contrib_r(dst_id)  = primary.contrib_r(src_id);
    other_primary.contrib_g(dst_id)  = primary.contrib_g(src_id);
    other_primary.contrib_b(dst_id)  = primary.contrib_b(src_id);
    other_primary.depth(dst_id)      = primary.depth(src_id);

}

fn @copy_secondary_ray( secondary: SecondaryStream
                      , other_secondary: SecondaryStream
                      , src_id: i32
                      , dst_id: i32
                      ) -> () {
    other_secondary.rays.id(dst_id)    = secondary.rays.id(src_id);
    other_secondary.rays.org_x(dst_id) = secondary.rays.org_x(src_id);
    other_secondary.rays.org_y(dst_id) = secondary.rays.org_y(src_id);
    other_secondary.rays.org_z(dst_id) = secondary.rays.org_z(src_id);
    other_secondary.rays.dir_x(dst_id) = secondary.rays.dir_x(src_id);
    other_secondary.rays.dir_y(dst_id) = secondary.rays.dir_y(src_id);
    other_secondary.rays.dir_z(dst_id) = secondary.rays.dir_z(src_id);
    other_secondary.rays.tmin(dst_id)  = secondary.rays.tmin(src_id);
    other_secondary.rays.tmax(dst_id)  = secondary.rays.tmax(src_id);
    other_secondary.next_chk(dst_id)   = secondary.next_chk(src_id);
    other_secondary.org_chk(dst_id)    = secondary.org_chk(src_id);
    other_secondary.pri_chk(dst_id)    = secondary.pri_chk(src_id);
    other_secondary.prim_id(dst_id) = secondary.prim_id(src_id);
    other_secondary.color_r(dst_id)  = secondary.color_r(src_id);
    other_secondary.color_g(dst_id)  = secondary.color_g(src_id);
    other_secondary.color_b(dst_id)  = secondary.color_b(src_id);
}

fn @make_ray_stream_reader(rays: RayStream, vector_width: i32) -> fn (i32, i32) -> Ray {
    @ |i, j| {
        let k = i * vector_width + j;
        make_ray(
            make_vec3(rays.org_x(k),
                      rays.org_y(k),
                      rays.org_z(k)),
            make_vec3(rays.dir_x(k),
                      rays.dir_y(k),
                      rays.dir_z(k)),
            rays.tmin(k),
            rays.tmax(k)
        )
    }
}

fn @make_ray_stream_writer(rays: RayStream, vector_width: i32) -> fn (i32, i32, Ray) -> () {
    @ |i, j, ray| {
        let k = i * vector_width + j;
        rays.org_x(k) = ray.org.x;
        rays.org_y(k) = ray.org.y;
        rays.org_z(k) = ray.org.z;
        rays.dir_x(k) = ray.dir.x;
        rays.dir_y(k) = ray.dir.y;
        rays.dir_z(k) = ray.dir.z;
        rays.tmin(k)  = ray.tmin;
        rays.tmax(k)  = ray.tmax;
    }
}

fn @make_primary_stream_hit_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> Hit {
    @ |i, j| {
        let k = i * vector_width + j;
        make_hit(
            primary.geom_id(k),
            primary.prim_id(k),
            primary.t(k),
            make_vec2(primary.u(k),
                      primary.v(k))
        )
    }
}
fn @make_primary_stream_hit_writer(primary: PrimaryStream, vector_width: i32, invalid_geom_id: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let k = i * vector_width + j;
        primary.geom_id(k) = if hit.geom_id == -1 { invalid_geom_id } else { hit.geom_id };
        primary.prim_id(k) = hit.prim_id;
        primary.t(k)       = hit.distance;
        primary.u(k)       = hit.uv_coords.x;
        primary.v(k)       = hit.uv_coords.y;
    }
}

fn @make_secondary_stream_hit_writer(secondary: SecondaryStream, vector_width: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let k = i * vector_width + j;
        secondary.prim_id(k)   = hit.prim_id;
        secondary.rays.tmin(k) = hit.distance;
        secondary.next_chk(k)  = hit.geom_id; 
    }
}

fn @make_primary_stream_state_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> RayState {
    @ |i, j| {
        let k = i * vector_width + j;
        RayState {
            rnd:     primary.rnd(k),
            contrib: make_color(primary.contrib_r(k), primary.contrib_g(k), primary.contrib_b(k)),
            mis:     primary.mis(k),
            depth:   primary.depth(k)
        }
    }
}

fn @make_primary_stream_state_writer(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32, RayState) -> () {
    @ |i, j, state| {
        let k = i * vector_width + j;
        primary.rnd(k)       = state.rnd;
        primary.contrib_r(k) = state.contrib.r;
        primary.contrib_g(k) = state.contrib.g;
        primary.contrib_b(k) = state.contrib.b;
        primary.mis(k)       = state.mis;
        primary.depth(k)     = state.depth;
    }
}

fn @print_size(head: &[u8], size: i32, rear: &[u8]) -> () {
    print_string(head); 
    print_i32(size);
    print_string(rear);
}

