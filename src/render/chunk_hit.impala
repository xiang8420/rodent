fn @get_chunk_bbox(scene: Scene, math: Intrinsics) -> BBox {
    let cur_chk = scene.cur_chk;
    let chunk = make_vec3_i32( math.floorf(scene.chunk.x) as i32
                             , math.floorf(scene.chunk.y) as i32
                             , math.floorf(scene.chunk.z) as i32
                             );
    let coord_x = cur_chk / (chunk.y * chunk.z);
    let coord_z = cur_chk % chunk.z;
    let coord_y = (cur_chk - coord_x * chunk.y * chunk.z) / chunk.z; 
    let coord   = make_vec3(coord_x as f32, coord_y as f32, coord_z as f32);

    let bbox    = scene.bbox; 
    let step    = vec3_div(vec3_sub(bbox.max, bbox.min), scene.chunk);
    let min     = vec3_add(bbox.min, vec3_mul(step, coord));
    let max     = vec3_add(min, step);
 
    make_bbox(min, max)
}

fn @get_sign(a: f32) -> i32 {
    if(a > 0 as f32) { 0 }
    else { 1 }
}

fn @get_uv_coord(bbox: BBox, its: Vec3, res: i32, dir: Vec3, axit: i32, math: Intrinsics) -> (i32, i32, i32) {
    fn @get_sign_code (a : f32, b: f32) -> i32 { 
        if a > b {
            get_sign(a) * 4 + get_sign(b) * 2 + 0
        } else {
            get_sign(a) * 4 + get_sign(b) * 2 + 1
        } 
    }
    let mut u: f32;
    let mut v: f32;
    let mut sign: i32;
    if axit == 0 { 
        u = (its.y - bbox.min.y) / (bbox.max.y - bbox.min.y) * res as f32; 
        v = (its.z - bbox.min.z) / (bbox.max.z - bbox.min.z) * res as f32;
        sign = get_sign_code(dir.y, dir.z); 
    } else if axit == 1 { 
        u = (its.x - bbox.min.x) / (bbox.max.x - bbox.min.x) * res as f32; 
        v = (its.z - bbox.min.z) / (bbox.max.z - bbox.min.z) * res as f32; 
        sign = get_sign_code(dir.x, dir.z); 
    } else { 
        u = (its.x - bbox.min.x) / (bbox.max.x - bbox.min.x) * res as f32; 
        v = (its.y - bbox.min.y) / (bbox.max.y - bbox.min.y) * res as f32; 
        sign = get_sign_code(dir.x, dir.y);
    }
    (u as i32, v as i32, sign)
}

fn @get_face_id(bbox: BBox, its: Vec3) -> i32 {
    let offset = 0.00001 as f32;
    let mut dist_min = its.x - bbox.min.x;
    let mut fid = 0;
    fn @get_min_dist(a: f32, b: f32, n: i32) -> () {
        let tmp = a - b;
        if tmp < dist_min {
            dist_min = tmp;
            fid = n;
        }
    }
    get_min_dist(bbox.max.x, its.x, 1);
    get_min_dist(its.y, bbox.min.y, 2);
    get_min_dist(bbox.max.y, its.y, 3);
    get_min_dist(its.z, bbox.min.z, 4);
    get_min_dist(bbox.max.z, its.z, 5);
    fid
}

fn @get_chunk_hit_coord(bbox: BBox, its: Vec3, dir: Vec3, res: i32, math: Intrinsics) -> i32 {
    let fid = get_face_id(bbox, its);
    let (u, v, sign) = get_uv_coord(bbox, its, res, dir, fid / 2, math);
    let result = ( sign << 28 ) + ((fid * res * res + u *res + v) << 8);
    result
}

// ctrb used as hit times
fn write_chunk_hit(org_chk: i32, color: Color, cur_chk:i32, chunk_hit: ChunkHit) -> () {
    if cur_chk >= chunk_hit.chk_size { return () }
    let chk_id = org_chk & 0xFF;
    let in_chk_id = (org_chk >> 8) & 0xFFFFF;
    if in_chk_id == 0 || chk_id == cur_chk { return () }

    let sign = (org_chk >> 28) & 0xF;
    let sign_bit = sign * 4;
    let chunk_hit_id = chk_id * chunk_hit.chk_cap + in_chk_id;
    let ctrb = (chunk_hit.ctrb(chunk_hit_id) >> sign_bit) & 0xF;
    
    let lu = color_luminance(color);
    let lu_i32 = if lu >= 1.0f { 15 } 
                 else if lu < 0.7f { 1 }
                 else { (lu * 16.0f) as i32 };
    if ctrb == 0 && lu_i32 != 0 {
        chunk_hit.ctrb(chunk_hit_id) += (lu_i32 << sign_bit);
    } else {
        if lu_i32 > ctrb {
            let diff = lu_i32 - ctrb;        
            chunk_hit.ctrb(chunk_hit_id) += (diff << sign_bit);
        }

      //  if lu_i32 < ctrb && lu_i32 > 0 {
      //      let diff = ctrb - lu_i32;        
      //      chunk_hit.ctrb(chunk_hit_id) -= (diff << sign_bit);
      //  }
    }
}

