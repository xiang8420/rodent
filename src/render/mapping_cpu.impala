// Trace function ------------------------------------------------------------------
fn @cpu_parallel_tiles( film_width: i32
                      , film_height: i32
                      , tile_width: i32
                      , tile_height: i32
                      , num_cores: i32
                      , image_range: &[f32]
                      , body: fn (i32, i32, i32, i32) -> ()) -> () {  
    let width  = image_range(2) - image_range(0);
    let height = image_range(3) - image_range(1);
    
    let num_tiles_x = round_up(width as i32, tile_width)  / tile_width;
    let num_tiles_y = round_up(height as i32, tile_height) / tile_height;

    let tiles_min_x = image_range(0) as i32 + 1;
    let tiles_min_y = image_range(1) as i32 + 1;

    let num_tiles = num_tiles_x * num_tiles_y;
    let tiles_div = make_fast_div(num_tiles_x as u32);
    let test = 1.0f;
    for i in parallel(num_cores, 0, num_tiles) {
        let y = fast_div(tiles_div, i as u32) as i32;
        let x = i - num_tiles_x * y;
        let xmin = tiles_min_x + x * tile_width;
        let ymin = tiles_min_y + y * tile_height;
        let xmax = cpu_intrinsics.min(xmin + tile_width,  image_range(2) as i32);
        let ymax = cpu_intrinsics.min(ymin + tile_height, image_range(3) as i32);
        @@body(xmin, ymin, xmax, ymax);
    }
}

extern fn cpu_sort_primary(primary: &PrimaryStream, ray_begins: &mut [i32], ray_ends: &mut[i32], num_geometries: i32, keep_nohit_rays: bool) -> i32 {
    let read_primary_hit = make_primary_stream_hit_reader(*primary, 1);

    // Count the number of rays per shader
    for i in range(0, num_geometries + 1) {
        ray_ends(i) = 0;
    }
    for i in range(0, primary.size) {
        ray_ends(primary.geom_id(i))++;
    }
    // Compute scan over shader bins
    let mut n = 0;
    print_string("primary size ");
    print_i32(primary.size);
    for i in range(0, num_geometries + 1) {
        ray_begins(i) = n;
        n += ray_ends(i);
        ray_ends(i) = n;
    }
    print_string("\n");
    
    // Sort by shader
    for i in range(0, num_geometries + 1) {
        let (begin, end) = (ray_begins(i), ray_ends(i));
	    let mut j = begin;
        while j < end {
            let geom_id = primary.geom_id(j);
            if geom_id != i {
                let k = ray_begins(geom_id)++;

                swap_i32(&mut primary.rays.id(k),    &mut primary.rays.id(j));
                swap_f32(&mut primary.rays.org_x(k), &mut primary.rays.org_x(j));
                swap_f32(&mut primary.rays.org_y(k), &mut primary.rays.org_y(j));
                swap_f32(&mut primary.rays.org_z(k), &mut primary.rays.org_z(j));
                swap_f32(&mut primary.rays.dir_x(k), &mut primary.rays.dir_x(j));
                swap_f32(&mut primary.rays.dir_y(k), &mut primary.rays.dir_y(j));
                swap_f32(&mut primary.rays.dir_z(k), &mut primary.rays.dir_z(j));
                swap_f32(&mut primary.rays.tmin(k),  &mut primary.rays.tmin(j));
                swap_f32(&mut primary.rays.tmax(k),  &mut primary.rays.tmax(j));

                swap_i32(&mut primary.grid_id(k),   &mut primary.grid_id(j));
                swap_i32(&mut primary.geom_id(k),   &mut primary.geom_id(j));
                swap_i32(&mut primary.prim_id(k),   &mut primary.prim_id(j));
                swap_f32(&mut primary.t(k),         &mut primary.t(j));
                swap_f32(&mut primary.u(k),         &mut primary.u(j));
                swap_f32(&mut primary.v(k),         &mut primary.v(j));
                swap_u32(&mut primary.rnd(k),       &mut primary.rnd(j));
                swap_f32(&mut primary.mis(k),       &mut primary.mis(j));
                swap_f32(&mut primary.contrib_r(k), &mut primary.contrib_r(j));
                swap_f32(&mut primary.contrib_g(k), &mut primary.contrib_g(j));
                swap_f32(&mut primary.contrib_b(k), &mut primary.contrib_b(j));
                swap_i32(&mut primary.depth(k),     &mut primary.depth(j));
            } else {
                j++;
            }
        }
    }
    // Kill rays that have not intersected anything
    if keep_nohit_rays { 
        ray_ends(num_geometries) 
    } else {
        ray_ends(num_geometries - 1) 
    }
    
}

fn @cpu_compact_ray_stream(rays: RayStream, i: i32, j: i32, mask: bool) -> () {
    rays.org_x(i) = rv_compact(rays.org_x(j), mask);
    rays.org_y(i) = rv_compact(rays.org_y(j), mask);
    rays.org_z(i) = rv_compact(rays.org_z(j), mask);
    rays.dir_x(i) = rv_compact(rays.dir_x(j), mask);
    rays.dir_y(i) = rv_compact(rays.dir_y(j), mask);
    rays.dir_z(i) = rv_compact(rays.dir_z(j), mask);
    rays.tmin(i)  = rv_compact(rays.tmin(j), mask);
    rays.tmax(i)  = rv_compact(rays.tmax(j), mask);
}

fn @cpu_move_ray_stream(rays: RayStream, i: i32, j: i32) -> () {
    rays.org_x(i) = rays.org_x(j);
    rays.org_y(i) = rays.org_y(j);
    rays.org_z(i) = rays.org_z(j);
    rays.dir_x(i) = rays.dir_x(j);
    rays.dir_y(i) = rays.dir_y(j);
    rays.dir_z(i) = rays.dir_z(j);
    rays.tmin(i)  = rays.tmin(j);
    rays.tmax(i)  = rays.tmax(j);
}

fn @cpu_compact_primary(primary: &PrimaryStream, vector_width: i32, vector_compact: bool) -> i32 {
    fn cpu_compact_primary_specialized(primary: &PrimaryStream) -> i32 {
        let mut k = 0;
        if vector_compact {
            for i in range_step(0, primary.size, vector_width) {
                for j in vectorize(vector_width) {
                    let id = primary.rays.id(i + j);
                    let mask = (id >= 0) & (i + j < primary.size);

                    primary.rays.id(k + j) = bitcast[i32](rv_compact(bitcast[f32](id), mask));

                    cpu_compact_ray_stream(primary.rays, k + j, i + j, mask);

                    primary.grid_id(k + j)   = bitcast[i32](rv_compact(bitcast[f32](primary.grid_id(i + j)), mask));
                    primary.rnd(k + j)       = bitcast[u32](rv_compact(bitcast[f32](primary.rnd(i + j)), mask));
                    primary.mis(k + j)       = rv_compact(primary.mis(i + j), mask);
                    primary.contrib_r(k + j) = rv_compact(primary.contrib_r(i + j), mask);
                    primary.contrib_g(k + j) = rv_compact(primary.contrib_g(i + j), mask);
                    primary.contrib_b(k + j) = rv_compact(primary.contrib_b(i + j), mask);
                    primary.depth(k + j)     = bitcast[i32](rv_compact(bitcast[f32](primary.depth(i + j)), mask));

                    k += cpu_popcount32(rv_ballot(mask));
                }
            }
        } else {
            for i in range(0, primary.size) {
                let id = primary.rays.id(i);
                if id >= 0 {
                    primary.rays.id(k)   = id;
                    primary.grid_id(k)   = primary.grid_id(i);
                    cpu_move_ray_stream(primary.rays, k, i);
                    primary.rnd(k)       = primary.rnd(i);
                    primary.mis(k)       = primary.mis(i);
                    primary.contrib_r(k) = primary.contrib_r(i);
                    primary.contrib_g(k) = primary.contrib_g(i);
                    primary.contrib_b(k) = primary.contrib_b(i);
                    primary.depth(k)     = primary.depth(i);
                    k++;
                }
            } 
        }
        k
    }
    ($cpu_compact_primary_specialized)(primary)
}

fn @cpu_compact_secondary(secondary: &SecondaryStream, vector_width: i32, vector_compact: bool) -> i32 {
    fn cpu_compact_secondary_specialized(secondary: &SecondaryStream) -> i32 {
        let mut k = 0;
        if vector_compact {
            for i in range_step(0, secondary.size, vector_width) {
                for j in vectorize(vector_width) {
                    let id = secondary.rays.id(i + j);
                    let mask = (id >= 0) & (i + j < secondary.size);

                    secondary.rays.id(k + j) = bitcast[i32](rv_compact(bitcast[f32](id), mask));

                    cpu_compact_ray_stream(secondary.rays, k + j, i + j, mask);

                    secondary.prim_id(k + j) = bitcast[i32](rv_compact(bitcast[f32](secondary.prim_id(i + j)), mask));
                    secondary.color_r(k + j) = rv_compact(secondary.color_r(i + j), mask);
                    secondary.color_g(k + j) = rv_compact(secondary.color_g(i + j), mask);
                    secondary.color_b(k + j) = rv_compact(secondary.color_b(i + j), mask);

                    k += cpu_popcount32(rv_ballot(mask));
                }
            }
        } else {
            for i in range(0, secondary.size) {
                let id = secondary.rays.id(i);
                if id >= 0 {
                    secondary.rays.id(k) = id;
                    cpu_move_ray_stream(secondary.rays, k, i);
                    secondary.prim_id(k) = secondary.prim_id(i);
                    secondary.color_r(k) = secondary.color_r(i);
                    secondary.color_g(k) = secondary.color_g(i);
                    secondary.color_b(k) = secondary.color_b(i);
                    k++;
                }
            } 

        }
        k
    }
    ($cpu_compact_secondary_specialized)(secondary)
}

fn @cpu_generate_rays( primary: PrimaryStream
                     , capacity: i32
                     , path_tracer: PathTracer
                     , id: &mut i32
                     , xmin: i32
                     , ymin: i32
                     , xmax: i32
                     , ymax: i32
                     , film_width: i32
                     , film_height: i32
                     , spp: i32
                     , vector_width: i32
                     ) -> i32 {
    let write_ray = make_ray_stream_writer(primary.rays, 1);
    let write_state = make_primary_stream_state_writer(primary, 1);
    let first_id = *id;
    let (tile_width, tile_height) = (xmax - xmin, ymax - ymin);
    let num_rays = cpu_intrinsics.min(spp * tile_width * tile_height - first_id, capacity - primary.size);
    let tile_div = make_fast_div(tile_width as u32);
    for i, _ in vectorized_range(vector_width, 0, num_rays) {
        let in_tile_id = first_id + i;
        // Compute x, y of ray within tile
        let sample = in_tile_id % spp;
        let in_tile_pixel = in_tile_id / spp;
        let in_tile_y = fast_div(tile_div, in_tile_pixel as u32) as i32;
        let in_tile_x = in_tile_pixel - in_tile_y * tile_width;
        let x = xmin + in_tile_x;
        let y = ymin + in_tile_y;
        let (ray, state) = @@(path_tracer.on_emit)(sample, x, y, film_width, film_height);
        let cur_ray = primary.size + i;
        write_ray(cur_ray, 0, ray);
        write_state(cur_ray, 0, state);
        primary.rays.id(cur_ray) = y * film_width + x;
        primary.grid_id(cur_ray) = 1022 as i32;
    }
    *id = first_id + num_rays;
    primary.size + num_rays
}

fn @cpu_traverse_primary(scene: Scene, min_max: MinMax, primary: &PrimaryStream, single: bool, vector_width: i32) -> () {
    fn cpu_traverse_primary_specialized(primary: &PrimaryStream) -> () {
        cpu_traverse_hybrid(
            min_max,
            scene.bvh,
            make_ray_stream_reader(primary.rays, vector_width),
            make_primary_stream_hit_writer(*primary, vector_width, scene.num_geometries + 1),
            vector_width /*packet_size*/,
            primary.size / vector_width + select(primary.size % vector_width != 0, 1, 0),
            single,
            false /*any_hit*/
        );
    }
    ($cpu_traverse_primary_specialized)(primary);
}

fn @cpu_traverse_secondary(scene: Scene, min_max: MinMax, secondary: &SecondaryStream, single: bool, vector_width: i32) -> () {
    fn cpu_traverse_secondary_specialized(secondary: &SecondaryStream) -> () {
        cpu_traverse_hybrid(
            min_max,
            scene.bvh,
            make_ray_stream_reader(secondary.rays, vector_width),
            make_secondary_stream_hit_writer(*secondary, vector_width),
            vector_width /*packet_size*/,
            secondary.size / vector_width + select(secondary.size % vector_width != 0, 1, 0),
            single,
            false /*any_hit*/
        );
    }
    ($cpu_traverse_secondary_specialized)(secondary);
}

fn @cpu_shade(geom_id: i32, primary: &PrimaryStream, secondary: &SecondaryStream, scene: Scene, path_tracer: PathTracer, accumulate: fn (i32, Color) -> (), begin: i32, end: i32, vector_width: i32) -> () {
    fn cpu_shade_specialized(primary: &PrimaryStream, secondary: &SecondaryStream, begin: i32, end: i32) -> () {
        let read_primary_ray    = make_ray_stream_reader(primary.rays, 1);
        let read_primary_hit    = make_primary_stream_hit_reader(*primary, 1);
        let read_primary_state  = make_primary_stream_state_reader(*primary, 1);
        let write_primary_ray   = make_ray_stream_writer(primary.rays, 1);
        let write_primary_state = make_primary_stream_state_writer(*primary, 1);
        let write_secondary_ray = make_ray_stream_writer(secondary.rays, 1);
        let grid_ids    = primary.grid_id;
        let write_grid = @ |i, _, id| grid_ids(i) = id;
	    for i, vector_width in vectorized_range(vector_width, begin, end) {
            let ray       = read_primary_ray(i, 0);
            let hit       = read_primary_hit(i, 0);
            let mut state = read_primary_state(i, 0);
            let ray_id    = primary.rays.id(i);
		
            let geom   = scene.geometries(geom_id);
            let surf   = geom.surface_element(ray, hit);
            let mat    = geom.shader(ray, hit, surf);

            // Execute hit point shading, and add the contribution of each lane to the frame buffer
            if(geom_id == scene.num_geometries) {
                write_primary_ray(i, 0, make_ray(vec3_add(surf.point, vec3_mulf(ray.dir, 0.0001f)), ray.dir, 0.001f, flt_max)); 
                write_grid(i, 0, 1022);
                continue()
            }

            let mut hit_color;
            for once() {
                @@(path_tracer.on_hit)(ray, hit, &mut state, surf, mat, @ |color| -> ! {
                    hit_color = color;
                    break()
                }, @ || -> ! {
                    hit_color = make_color(0.0f, 0.0f, 0.0f);
                    break()
                })
            }
            for lane in unroll(0, vector_width) {
        		let j = bitcast[i32](rv_extract(bitcast[f32](ray_id), lane));
                accumulate(j,
                    make_color(
                        rv_extract(hit_color.r, lane),
                        rv_extract(hit_color.g, lane),
                        rv_extract(hit_color.b, lane)
                    )
                );
            }

            // Compute shadow rays
            for once() {
                @@(path_tracer.on_shadow)(ray, hit, &mut state, surf, mat, @ |ray, color| -> ! {
                    write_secondary_ray(i, 0, ray);
                    secondary.color_r(i) = color.r;
                    secondary.color_g(i) = color.g;
                    secondary.color_b(i) = color.b;
                    secondary.rays.id(i) = ray_id;
                    break()
                }, @ || -> ! {
                    secondary.rays.id(i) = -1;
                    break()
                })
            }

            // Sample new rays
            for once() {
                @@(path_tracer.on_bounce)(ray, hit, &mut state, surf, mat, @ |new_ray, new_state| -> ! {
                    write_primary_ray(i, 0, new_ray);
                    write_primary_state(i, 0, new_state);
                    write_grid(i, 0, 1022);
                    break()
                }, @ || -> ! {
                    primary.rays.id(i) = -1;
                    write_grid(i, 0, -1000);
                    break()
                })
            }
        }
    }
    cpu_shade_specialized(primary, secondary, begin, end);
}

fn @cpu_get_film_data() -> (&mut [f32], i32, i32) {
    let mut film_pixels : &mut [f32];
    let mut film_width  : i32;
    let mut film_height : i32;
    rodent_get_film_data(0, &mut film_pixels, &mut film_width, &mut film_height);
    (film_pixels, film_width, film_height)
}

fn @cpu_trace( scene: Scene
             , path_tracer: PathTracer
             , min_max: MinMax
             , single: bool
             , tile_size: i32
             , Spp: i32
             , num_cores: i32
             , vector_width: i32
             , use_embree: bool
             , vector_compact: bool
             ) -> () {
    let (film_pixels, film_width, film_height) = cpu_get_film_data();
   
    fn @accumulate(pixel: i32, color: Color) -> () {
        let inv = 1.0f / (Spp as f32);
        film_pixels(pixel * 3 + 0) += color.r * inv;
        film_pixels(pixel * 3 + 1) += color.g * inv;
        film_pixels(pixel * 3 + 2) += color.b * inv;
    }
    let mut primary_counter = 0i64;
    let mut bounces_counter = 0i64;
    let mut shadow_counter  = 0i64;
    let mut shading_counter = 0i64;
    let mut total_counter   = 0i64;

    let spp = scene.camera.spp;
    let mut image_range:[f32 * 4];
    let range_t = scene.camera.range;
    image_range(0) = range_t.x; image_range(1) = range_t.y;
    image_range(2) = range_t.z; image_range(3) = range_t.w;   
    
    for xmin, ymin, xmax, ymax in cpu_parallel_tiles(film_width, film_height, tile_size, tile_size, num_cores, image_range) {
        with cpu_profile(&mut total_counter) {
            // Get ray streams/states from the CPU driver
            let mut primary   : PrimaryStream;
            let mut buffer    : PrimaryStream;
            let mut secondary : SecondaryStream;
            let capacity = spp * tile_size * tile_size;
            rodent_cpu_get_primary_stream(&mut primary,     capacity);
            rodent_cpu_get_buffer_stream(&mut buffer,     capacity);
            rodent_cpu_get_secondary_stream(&mut secondary, capacity);
            let mut id = 0;
            let num_rays = spp * (ymax - ymin) * (xmax - xmin);
            while id < num_rays || primary.size > 0 {
                let first = id == 0;
                // (Re-)generate primary rays
                if primary.size < capacity {
                    primary.size = cpu_generate_rays(primary, capacity, path_tracer, &mut id, xmin, ymin, xmax, ymax, 
                                                film_width, film_height, spp, vector_width);
                }
                // Trace primary rays
                with cpu_profile(if first { &mut primary_counter } else { &mut bounces_counter }) {
                    if use_embree {
                        rodent_cpu_intersect_primary_embree(primary, scene.num_geometries, select(first, -1, 0));
                    } else {
                        cpu_traverse_primary(scene, min_max, primary, single, vector_width);
                    }
                }
                // Sort hits by shader id, and filter invalid hits
                let mut ray_begins : [i32 * 1024];
                let mut ray_ends   : [i32 * 1024];
                primary.size = cpu_sort_primary(primary, &mut ray_begins, &mut ray_ends, scene.num_geometries, false);
                // Perform (vectorized) shading
                with cpu_profile(&mut shading_counter) {
                    let mut begin = 0;
                    for geom_id in unroll(0, scene.num_geometries) {
                        let end = ray_ends(geom_id);
                        cpu_shade(geom_id, primary, secondary, scene, path_tracer, accumulate, begin, end, vector_width);
                        begin = end;
                    }
                }
                // Filter terminated rays
                primary.size   = cpu_compact_primary(primary, vector_width, vector_compact);
                secondary.size = primary.size;

                // Compact and trace secondary rays
                secondary.size = cpu_compact_secondary(secondary, vector_width, vector_compact);
                if likely(secondary.size > 0) {
                    with cpu_profile(&mut shadow_counter) {
                        if use_embree {
                            rodent_cpu_intersect_secondary_embree(secondary);
                        } else {
                            cpu_traverse_secondary(scene, min_max, secondary, single, vector_width);
                        }
                    }
                }

                // Add the contribution for secondary rays to the frame buffer
                for i in range(0, secondary.size) {
                    if secondary.prim_id(i) < 0 {
                        let j = secondary.rays.id(i);
                        accumulate(j,
                            make_color(
                                secondary.color_r(i),
                                secondary.color_g(i),
                                secondary.color_b(i)
                            )
                        );
                    }
                }
            }
        }
    }
    if cpu_profiling_enabled {
        fn print_counter(counter: i64, total: i64, name: &[u8]) -> () {
            print_string(name);
            print_string(": ");
            print_i64(counter);
            print_string(" (");
            print_i64(counter * 100i64 / total);
            print_string("%)\n");
        }
        print_counter(primary_counter, total_counter, "primary");
        print_counter(bounces_counter, total_counter, "bounces");
        print_counter(shadow_counter,  total_counter, "shadow");
        print_counter(shading_counter, total_counter, "shade");
        print_counter(total_counter,   total_counter, "total");
    }
}

fn @cpu_get_grid_id( rays: RayStream
                    , grid_ids: &mut [i32]
                    , size: i32 
                    , min_max: MinMax
                    , vector_width: i32
                    , scene: Scene
                    ) -> () {
    let bbox  = scene.bbox;
    let grid  = make_vec3i(scene.grid.x as i32, scene.grid.y as i32, scene.grid.z as i32);
    let scale = vec3_sub(bbox.max, bbox.min);
    let step  = vec3_div(scale, scene.grid);
    let inv_step = vec3_div(make_vec3(1.0f, 1.0f, 1.0f), step);
 
    let num_chunks = grid.x * grid.y * grid.z;

    let write_chunk = @ |i, _, id| grid_ids(i) = id;
    let ray_reader  = make_ray_stream_reader(rays, 1);
    let ray_ids     = rays.id;
    // Compact primary rays into another queue
    
    for src_id, _ in vectorized_range(vector_width, 0, size) {
        let ray = ray_reader(src_id, 0);
        if grid_ids(src_id) == 1022  {
            if inside_point_bbox(bbox, ray.org){
                // bad : equals itself chunk
                let c = vec3_mul(vec3_sub(ray.org, bbox.min), inv_step);
                write_chunk(src_id, 0, coordinate_compress(c, grid, bbox.max, cpu_intrinsics));
            } else {
                let (t0, t1) = intersect_ray_box(min_max, false, ray, bbox);
                if t0 <= t1 {
                    let its = vec3_add(vec3_mulf(ray.dir, t0 + 0.001f), ray.org);
                    let c = vec3_mul(vec3_sub(its, bbox.min), inv_step);
                    write_chunk(src_id, 0, coordinate_compress(c, grid, bbox.max, cpu_intrinsics));
                } else {
                    write_chunk(src_id, 0, -1000);
                }
            }
        } else {
            let coord = get_coordinate(grid_ids(src_id));
            let compressed_chunk_id = get_closest_chunk(min_max, ray, bbox, coord, grid, step, inv_step, cpu_intrinsics);
            write_chunk(src_id, 0, compressed_chunk_id);
        }
    } 
}


fn @cpu_primary_transfer( primary: PrimaryStream
                        , buffer: PrimaryStream
                        , chunk: i32
                        , capacity: i32
                        , generate_end: bool 
                        ) -> (i32, i32) {
    let grid_ids = primary.grid_id;
    let buffer_grids = buffer.grid_id;
    let mut primary_size;
    let mut buffer_size;
    let mut dead_rays;
    dead_rays = 0;

    primary_size = 0;
    buffer_size = buffer.size;
    
    for i in range(0, primary.size) {
        let cid = get_chunk_id(grid_ids(i));
        if cid == chunk {
            copy_primary_ray(primary, primary, i, primary_size++, true);
        } else if cid != -1 {
            if buffer_size >= capacity {
                rodent_buffer_primary_send(-1, buffer_size, true);
                buffer_size = 0;
            }
            copy_primary_ray(primary, buffer, i, buffer_size++, true);
        } else {
            dead_rays++;
        } 
    } 
    let idle = generate_end && primary_size == 0; 
    if idle {
        print_string("slave send left rays");
        print_i32(buffer_size);
        print_string("\n");
        rodent_buffer_primary_send(-1, buffer_size, true);
        buffer_size = 0;
    }    
    primary_size = rodent_primary_recv(-1, primary_size, idle, true); 

    (primary_size, buffer_size)    
}

fn @check_grid_id(primary: PrimaryStream, chunk: i32, pos: i32) -> () {
    if chunk == 0 {
        let mut ray_id = 0;
        let mut prim_0 = 0;
        let mut prim_1000 = 0;
        let mut prim_4352 = 0;
        let mut prim_1022 = 0;    
     
        let ray_ids     = primary.rays.id;
        let grid_ids    = primary.grid_id;
        for i in range(0, primary.size) {
            if ray_ids(i) == -1 {ray_id ++; }
            if grid_ids(i) == 0 {prim_0 ++; }
            if grid_ids(i) == 4352 {prim_4352 ++; }
            if grid_ids(i) == -1000 {prim_1000 ++; }
            if grid_ids(i) == 1022 {prim_1022 ++;}
        }
        print_string("chunk:");
        print_i32(chunk);
        print_string("|");
        print_i32(pos);
        print_string(" ray id -1: "); print_i32(ray_id); 
        print_string(" | prim 1022: "); print_i32(prim_1022); 
        print_string(" | 0: "); print_i32(prim_0); 
        print_string(" |  4352: "); print_i32(prim_4352); 
        print_string(" | -1000: "); print_i32(prim_1000);
        print_string("\n"); 
    }
}

fn @cpu_dis_trace( scene: Scene
                 , path_tracer: PathTracer
                 , min_max: MinMax
                 , single: bool
                 , tile_size: i32
                 , Spp: i32
                 , num_cores: i32
                 , vector_width: i32
                 , use_embree: bool
                 , vector_compact: bool
                 ) -> () {
    let (film_pixels, film_width, film_height) = cpu_get_film_data();
   
    fn @accumulate(pixel: i32, color: Color) -> () {
        let inv = 1.0f / (Spp as f32);
        film_pixels(pixel * 3 + 0) += color.r * inv;
        film_pixels(pixel * 3 + 1) += color.g * inv;
        film_pixels(pixel * 3 + 2) += color.b * inv;
    }
    let mut primary_counter = 0i64;
    let mut bounces_counter = 0i64;
    let mut shadow_counter  = 0i64;
    let mut shading_counter = 0i64;
    let mut get_chunk_counter = 0i64;
    let mut transfer_counter = 0i64;
    let mut total_counter   = 0i64;

    let spp = scene.camera.spp;
    let mut image_range:[f32 * 4];
    let range_t = scene.camera.range;
    image_range(0) = range_t.x; image_range(1) = range_t.y;
    image_range(2) = range_t.z; image_range(3) = range_t.w;   
    
    print_string("start rendering\n");     
    with cpu_profile(&mut total_counter) {
        // Get ray streams/states from the CPU driver
        let mut primary   : PrimaryStream;
        let mut buffer    : PrimaryStream;
        let mut secondary : SecondaryStream;
        let capacity = 1024 * 1024;
        rodent_cpu_get_primary_stream(&mut primary,     capacity);
        rodent_cpu_get_buffer_stream(&mut buffer,       capacity);
        rodent_cpu_get_secondary_stream(&mut secondary, capacity);
        let mut id = 0;
        let mut has_unloaded_rays = false;
        let num_rays = spp * (image_range(2) - image_range(0)) as i32 * (image_range(3) - image_range(1)) as i32;
        
        print_i32(num_rays);
        let print_node = 1;
        while  id < num_rays || primary.size > 0 || has_unloaded_rays {
            let first = id == 0;
            // (Re-)generate primary rays
            if scene.chunk == print_node {
                print_string("primary size before transfer ");
                print_i32(primary.size);
                print_string("\n");
            }
            if primary.size < capacity {
                primary.size = cpu_generate_rays(primary, capacity, path_tracer, &mut id, 0, 0, film_width, film_height, 
                                            film_width, film_height, spp, vector_width);
            }
//            check_grid_id(primary, scene.chunk, -1);
            with cpu_profile(&mut get_chunk_counter) {
                cpu_get_grid_id(primary.rays, primary.grid_id, primary.size, min_max, vector_width, scene);
            }
//            check_grid_id(primary, scene.chunk, 0);
            if scene.chunk == print_node {
                rodent_first_primary_check(-1, primary.size, 2, true);
                print_string("buffer size");
                print_i32(buffer.size);
            }
            with cpu_profile(&mut transfer_counter) {
                let (primary_size, buffer_size) = cpu_primary_transfer(primary, buffer, scene.chunk, capacity, id == num_rays);
                primary.size = primary_size; 
                buffer.size = buffer_size; 
            }
            if scene.chunk == print_node {
                rodent_first_primary_check(-1, primary.size, 2, true);
                print_string("buffer size");
                print_i32(buffer.size);
                print_string("primary size after transfer: "); print_i32(primary.size); 
                print_string("num rays id "); print_i32(id); print_string("\n");
            }
            has_unloaded_rays = primary.size > 0;
//            check_grid_id(primary, scene.chunk, 1);
            if primary.size == 0 {
                print_string("primary size == 0:");
                print_i32(id);
                print_string("\n");
                if id < num_rays {continue()}
                else {break()}
            }
            if scene.chunk == print_node {
                print_string("before traverse\n");
            } 
            // Trace primary rays
            with cpu_profile(if first { &mut primary_counter } else { &mut bounces_counter }) {
                if use_embree {
                    rodent_cpu_intersect_primary_embree(primary, scene.num_geometries, select(first, -1, 0));
                } else {
                    cpu_traverse_primary(scene, min_max, primary, single, vector_width);
                }
            }
            if scene.chunk == print_node {
                print_string("after traverse\n");
            } 
//            check_grid_id(primary, scene.chunk, 2);
            // Sort hits by shader id, and filter invalid hits
            let mut ray_begins : [i32 * 1024];
            let mut ray_ends   : [i32 * 1024];
            primary.size = cpu_sort_primary(primary, &mut ray_begins, &mut ray_ends, scene.num_geometries + 2, true);
            if scene.chunk == print_node {
                print_string("after sort\n");
                check_grid_id(primary, scene.chunk, 3);
                print_string("geom num: "); 
                for i in range(0, scene.num_geometries) {
                    print_i32(ray_ends(i)); 
                    print_string("  ");
                }        
                print_string("\n"); 
            } 
            // Perform (vectorized) shading
            with cpu_profile(&mut shading_counter) {
                let mut begin = 0;
                for geom_id in unroll(0, scene.num_geometries + 1) {
                    let end = ray_ends(geom_id);
                    if scene.chunk == print_node {
                        print_string("| ");
                        print_i32(geom_id);
                    }
                    cpu_shade(geom_id, primary, secondary, scene, path_tracer, accumulate, begin, end, vector_width);
                    begin = end;
                    if scene.chunk == print_node {
                        print_i32(geom_id);
                        print_string(" ");
                    }
                }
            }
            if scene.chunk == print_node {
                print_string("after shade\n");
            } 
            check_grid_id(primary, scene.chunk, 4);
            // Filter terminated rays
            primary.size   = cpu_compact_primary(primary, vector_width, false /*vector_compact*/);
            secondary.size = ray_ends(scene.num_geometries - 1);
            
            //cpu_get_grid_id(secondary.rays, secondary.grid_id, secondary.size, min_max, vector_width, scene);
            //let (secondary_size, secondary_buffer_size) = cpu_primary_transfer(primary, buffer, scene.chunk, capacity, id == num_rays);
            //primary.size = primary_size; 
            //buffer.size = buffer_size; 

            // Compact and trace secondary rays
            secondary.size = cpu_compact_secondary(secondary, vector_width, vector_compact);
            if likely(secondary.size > 0) {
                with cpu_profile(&mut shadow_counter) {
                    if use_embree {
                        rodent_cpu_intersect_secondary_embree(secondary);
                    } else {
                        cpu_traverse_secondary(scene, min_max, secondary, single, vector_width);
                    }
                }
            }

            // Add the contribution for secondary rays to the frame buffer
            for i in range(0, secondary.size) {
                if secondary.prim_id(i) < 0 || secondary.grid_id(i) == scene.num_geometries {
                    let j = secondary.rays.id(i);
                    accumulate(j,
                        make_color(
                            secondary.color_r(i),
                            secondary.color_g(i),
                            secondary.color_b(i)
                        )
                    );
                }
            }
        }
    }
    if cpu_profiling_enabled {
        fn print_counter(counter: i64, total: i64, name: &[u8]) -> () {
            print_string(name);
            print_string(": ");
            print_i64(counter);
            print_string(" (");
            print_i64(counter * 100i64 / total);
            print_string("%)\n");
        }
        print_counter(primary_counter, total_counter, "primary");
        print_counter(bounces_counter, total_counter, "bounces");
        print_counter(shadow_counter,  total_counter, "shadow");
        print_counter(shading_counter, total_counter, "shade");
        print_counter(get_chunk_counter, total_counter, "get chunk");
        print_counter(transfer_counter, total_counter, "transfer");
        print_counter(total_counter,   total_counter, "total");
    }
    print_string("end rendering\n");     
}

// CPU device ----------------------------------------------------------------------

fn @make_cpu_device(use_embree: bool, vector_compact: bool, single: bool, min_max: MinMax, vector_width: i32, num_cores: i32, tile_size: i32) -> Device {
    Device {
        intrinsics: cpu_intrinsics,
        trace: @ |scene, path_tracer, spp| {
            cpu_dis_trace(
                scene,
                path_tracer,
                min_max,
                single,
                tile_size,
                spp,
                num_cores,
                vector_width,
                use_embree,
                vector_compact
            )
        },
        present: @ || rodent_present(0),
        load_buffer: @ |filename| {
            let p = rodent_load_buffer(0, filename);
            DeviceBuffer {
                load_f32:  @ |i| (p as &[f32])(i),
                load_i32:  @ |i| (p as &[i32])(i),
                load_vec2: @ |i| { let q = p as &[f32]; make_vec2(q(i * 2 + 0), q(i * 2 + 1)) },
                load_vec3: @ |i| { let q = p as &[f32]; make_vec3(q(i * 3 + 0), q(i * 3 + 1), q(i * 3 + 2)) },
                load_vec4: @ |i| { let v = (p as &[simd[f32 * 4]])(i); make_vec4(v(0), v(1), v(2), v(3)) },
                load_int2: @ |i| { let q = p as &[i32]; (q(i * 2 + 0), q(i * 2 + 1)) },
                load_int3: @ |i| { let q = p as &[i32]; (q(i * 3 + 0), q(i * 3 + 1), q(i * 3 + 2)) },
                load_int4: @ |i| { let v = (p as &[simd[i32 * 4]])(i); (v(0), v(1), v(2), v(3)) }
            }
        },
        load_bvh: @ |filename| {
            if vector_width == 8 {
                let mut nodes;
                let mut tris;
                rodent_load_bvh8_tri4(0, filename, &mut nodes, &mut tris);
                make_cpu_bvh8_tri4(nodes, tris)
            } else {
                let mut nodes;
                let mut tris;
                rodent_load_bvh4_tri4(0, filename, &mut nodes, &mut tris);
                make_cpu_bvh4_tri4(nodes, tris)
            }
        },
        load_png: @ |filename| {
            let mut pixel_data;
            let mut width;
            let mut height;
            rodent_load_png(0, filename, &mut pixel_data, &mut width, &mut height);
            make_image_rgba32(@ |x, y| (pixel_data as &[u32])(y * width + x), width, height)
        },
        load_jpg: @ |filename| {
            let mut pixel_data;
            let mut width;
            let mut height;
            rodent_load_jpg(0, filename, &mut pixel_data, &mut width, &mut height);
            make_image_rgba32(@ |x, y| (pixel_data as &[u32])(y * width + x), width, height)
        }
    }
}

fn @make_avx2_device(use_embree: bool) -> Device {
    make_cpu_device(use_embree, true, true, make_cpu_int_min_max(), 8, 0, 16)
}

fn @make_avx_device() -> Device {
    make_cpu_device(false, true, true, make_default_min_max(), 8, 0, 16)
}

fn @make_sse42_device() -> Device {
    make_cpu_device(false, false, true, make_cpu_int_min_max(), 4, 0, 16)
}

fn @make_asimd_device() -> Device {
    make_cpu_device(false, false, false, make_cpu_int_min_max(), 4, 0, 16)
}

fn @make_cpu_default_device() -> Device {
    make_cpu_device(false, false, false, make_default_min_max(), 1, 0, 16)
}
