struct Bvh {
    node:     fn (i32) -> Node, // Access to one node of the BVH
    prim:     fn (i32) -> Prim, // Access to one (possibly packed) primitive
    prefetch: fn (i32) -> (),   // Prefetches a leaf or inner node
    arity:    i32,              // Arity of the BVH (number of children per node)
}

struct Node {
    bbox:         fn (i32) -> BBox,             // Loads the bounding box of one child node
    ordered_bbox: fn (i32, RayOctant) -> BBox,  // Loads the bounding box of one child with the given octant order (mapping specific)
    child:        fn (i32) -> i32               // Gets the index of one child node
}

struct Prim {
    intersect: fn (i32, Intrinsics, Ray, fn () -> !) -> Hit,  // Intersects a primitive in the packet
    is_valid:  fn (i32) -> bool,                              // Returns true if the primitive in the packet is valid
    is_last:   bool,                                          // True if this is the last primitive packet in the leaf
    size:      i32                                            // Number of primitives in the packet (must be a constant)
}

struct Ray {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    inv_dir: Vec3, // Inverse of the direction
    inv_org: Vec3, // Origin multiplied by the inverse of the direction
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

struct Hit {
    distance:  f32,    // Distance to the intersection point
    uv_coords: Vec2,   // Surface coordinates
    prim_id:   i32,    // Primitive identifier, or -1 (no intersection found)
    geom_id:   i32     // Geometry identifier, or -1 (no intersection found)
}

struct Tri {
    v0: Vec3,          // First vertex
    v1: Vec3,          // Second vertex
    v2: Vec3,          // Third vertex
    e1: Vec3,          // First edge (= v0 - v1)
    e2: Vec3,          // Second edge (= v2 - v0)
    n:  Vec3           // Geometric normal (= cross(e1, e2))
}

struct BBox {
    min: Vec3,         // Minimum corner
    max: Vec3          // Maximum corner
}

// Min/max functions required to perform the ray-box test
struct MinMax {
    fmaxmaxf:   fn (f32, f32, f32) -> f32,
    fminminf:   fn (f32, f32, f32) -> f32,
    fminmaxf:   fn (f32, f32, f32) -> f32,
    fmaxminf:   fn (f32, f32, f32) -> f32,
    fmaxf:      fn (f32, f32) -> f32,
    fminf:      fn (f32, f32) -> f32,
    is_integer: bool
}

type RayOctant = i32;

// Constructs a set of comparators from min and max functions.
// May not be the optimal intrinsics if the hardware provides a combined min/max instruction.
fn @make_min_max( fminf: fn (f32, f32) -> f32
                , fmaxf: fn (f32, f32) -> f32
                , is_integer: bool
                ) -> MinMax {
    MinMax {
        fminminf:   @ |a, b, c| fminf(fminf(a, b), c),
        fmaxmaxf:   @ |a, b, c| fmaxf(fmaxf(a, b), c),
        fminmaxf:   @ |a, b, c| fmaxf(fminf(a, b), c),
        fmaxminf:   @ |a, b, c| fminf(fmaxf(a, b), c),
        fminf:      fminf,
        fmaxf:      fmaxf,
        is_integer: is_integer
    }
}

// Floating point min/max, works on every ISA, but might not be optimal
fn @make_default_min_max() -> MinMax {
    let fminf = @ |x, y| select(x < y, x, y);
    let fmaxf = @ |x, y| select(x > y, x, y);
    make_min_max(fminf, fmaxf, false)
}

fn @make_ray(org: Vec3, dir: Vec3, tmin: f32, tmax: f32) -> Ray {
    let inv_dir = make_vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let inv_org = vec3_neg(vec3_mul(org, inv_dir));
    Ray {
        org: org,
        dir: dir,
        inv_dir: inv_dir,
        inv_org: inv_org,
        tmin: tmin,
        tmax: tmax
    }
}

fn @make_hit(geom_id: i32, prim_id: i32, t: f32, uv: Vec2) -> Hit {
    Hit {
        distance:  t,
        uv_coords: uv,
        prim_id:   prim_id,
        geom_id:   geom_id
    }
}

fn @make_tri(v0: Vec3, e1: Vec3, e2: Vec3, n: Vec3) -> Tri {
    Tri {
        v0: v0,
        v1: vec3_sub(v0, e1),
        v2: vec3_add(v0, e2),
        e1: e1,
        e2: e2,
        n:  n
    }
}

fn @make_bbox(min: Vec3, max: Vec3) -> BBox {
    BBox {
        min: min,
        max: max
    }
}

fn @ray_octant(ray: Ray) -> RayOctant {
    select(ray.dir.x > 0.0f, 1, 0) |
    select(ray.dir.y > 0.0f, 2, 0) |
    select(ray.dir.z > 0.0f, 4, 0)
}

fn @empty_hit(tmax: f32) -> Hit {
    make_hit(-1, -1, tmax, undef())
}

fn @empty_bbox() -> BBox {
    make_bbox(
        make_vec3( flt_max,  flt_max,  flt_max),
        make_vec3(-flt_max, -flt_max, -flt_max)
    )
}

fn @bbox_extend(a: BBox, b: BBox) -> BBox {
    make_bbox(
        vec3_min(a.min, b.min),
        vec3_max(a.max, b.max)
    )
}

fn @bbox_append(a: BBox, b: Vec3) -> BBox {
    make_bbox(
        vec3_min(a.min, b),
        vec3_max(a.max, b)
    )
}

fn @bbox_half_area(a: BBox) -> f32 {
    let ext = vec3_sub(a.max, a.min);
    ext.x * (ext.y + ext.z) + ext.y * ext.z
}

fn @intersect_ray_tri(math: Intrinsics, backface_culling: bool, ray: Ray, tri: Tri, no_hit: fn () -> !) -> (f32, f32, f32) {
    let c = vec3_sub(tri.v0, ray.org);
    let r = vec3_cross(ray.dir, c);
    let det = vec3_dot(tri.n, ray.dir);
    let abs_det = math.fabsf(det);

    let u = prodsign(vec3_dot(r, tri.e2), det);
    let mut mask = u >= 0.0f;

    let v = prodsign(vec3_dot(r, tri.e1), det);
    mask &= v >= 0.0f;
    mask &= u + v <= abs_det;

    if likely(rv_all(!mask)) { no_hit() }

    let t = prodsign(vec3_dot(c, tri.n), det);
    mask &= if backface_culling { det < 0.0f } else { abs_det != 0.0f };
    mask &= t >= abs_det * ray.tmin;
    mask &= t <= abs_det * ray.tmax;

    if likely(rv_all(!mask)) { no_hit() }

    if mask {
        let inv_det = 1.0f / abs_det;
        (t * inv_det, u * inv_det, v * inv_det)
    } else {
        no_hit()
    }
}

fn @intersect_ray_box(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> (f32, f32) {
    let t0 = vec3_add(vec3_mul(ray.inv_dir, bbox.min), ray.inv_org);
    let t1 = vec3_add(vec3_mul(ray.inv_dir, bbox.max), ray.inv_org);

    let (tentry, texit) =
        if ordered {
            (min_max.fmaxmaxf(t0.x, t0.y, min_max.fmaxf(t0.z, ray.tmin)),
             min_max.fminminf(t1.x, t1.y, min_max.fminf(t1.z, ray.tmax)))
        } else {
            (min_max.fmaxmaxf(min_max.fminf(t0.x, t1.x), min_max.fminf(t0.y, t1.y), min_max.fminmaxf(t0.z, t1.z, ray.tmin)),
             min_max.fminminf(min_max.fmaxf(t0.x, t1.x), min_max.fmaxf(t0.y, t1.y), min_max.fmaxminf(t0.z, t1.z, ray.tmax)))
        };
    (tentry, texit)
}

fn @inside_point_bbox(bbox: BBox, p: Vec3) -> bool {
   return ( p.x >= bbox.min.x && p.x <= bbox.max.x  
  && p.y >= bbox.min.y && p.y <= bbox.max.y 
  && p.z >= bbox.min.z && p.z <= bbox.max.z) 
}

fn @get_chunk_id(n: i32) -> i32 {
    if n == -1000 {
        return( -1 )
    }
    n >> 12 as i32
}

fn @coordinate_grid_id(grid: Vec3, scale: Vec3_i32, math: Intrinsics) -> i32 {
    let id = make_vec3_i32(math.floorf(grid.x) as i32, math.floorf(grid.y) as i32, math.floorf(grid.z) as i32); 
    (id.x * scale.y + id.y) * scale.z + id.z
}

fn @get_grid_id(grid: Vec3, scale: Vec3_i32, max: Vec3, math: Intrinsics) -> i32 {
    let id = make_vec3_i32(math.floorf(grid.x) as i32, math.floorf(grid.y) as i32, math.floorf(grid.z) as i32); 
    ((id.x * scale.y + id.y) * scale.z) + id.z
}

fn @coordinate_compress(grid: Vec3, scale: Vec3_i32, max: Vec3, math: Intrinsics) -> i32 {
    let mut id = make_vec3_i32(math.floorf(grid.x) as i32, math.floorf(grid.y) as i32, math.floorf(grid.z) as i32); 
    if grid.x == max.x {id.x = scale.x - 1; } 
    if grid.y == max.y {id.y = scale.y - 1; } 
    if grid.z == max.z {id.z = scale.z - 1; } 
    
    if  id.x < 0 || id.x >= scale.x 
     || id.y < 0 || id.y >= scale.y
     || id.z < 0 || id.z >= scale.z {
        return( -1000 )
    } 
    let grid = ((id.x * scale.y + id.y) * scale.z) + id.z;
    (grid << 12) + (id.x << 8) + (id.y << 4) + id.z
}

fn @get_coordinate(n: i32) -> (Vec3_i32) {
    let x = (n >> 8) & 0xF;
    let y = (n >> 4) & 0xF;
    let z = n & 0xF;   
    make_vec3_i32(x, y, z)
}

fn @get_grid_coordinate(grid: i32, scale: Vec3_i32) -> (Vec3_i32) {
    let x = grid / (scale.y  * scale.z );
    let y = (grid - x * (scale.y * scale.z)) / scale.z;
    let z = grid % scale.z; 
    make_vec3_i32(x, y, z)
}

fn @get_closest_grid(min_max: MinMax, ray: Ray, org: Vec3,  bbox: BBox, id: Vec3_i32, scale: Vec3_i32, step: Vec3, inv_step: Vec3, math: Intrinsics) -> i32 {
    let mut bound: Vec3;
    let mut step_dir = make_vec3(1.0f, 1.0f, 1.0f);
    let id_f = make_vec3(id.x as f32, id.y as f32, id.z as f32);
    if ray.dir.x > 0.0f {
        bound.x = (id_f.x + 1.0f) * step.x + bbox.min.x;
    } else {
        bound.x = id_f.x * step.x + bbox.min.x;
        step_dir.x = -1.0f;
    }
    if ray.dir.y > 0.0f {
        bound.y = (id_f.y + 1.0f) * step.y + bbox.min.y;
    } else {
        bound.y = id_f.y * step.y + bbox.min.y;
        step_dir.y = -1.0f;
    }
    if ray.dir.z > 0.0f {
        bound.z = (id_f.z + 1.0f) * step.z + bbox.min.z;
    } else {
        bound.z = id_f.z * step.z + bbox.min.z;
        step_dir.z = -1.0f;
    }

    let its = vec3_add(vec3_mul(ray.inv_dir, bound), vec3_neg(vec3_mul(org, ray.inv_dir))); 
    
    let mut next_id = make_vec3(id_f.x, id_f.y, id_f.z);    
    if its.x < its.z {
        if its.x < its.y {
            next_id.x = next_id.x + step_dir.x;
        } else {
            next_id.y = next_id.y + step_dir.y;
        }
    } else {
        if its.z < its.y {
            next_id.z = next_id.z + step_dir.z;
        } else {
            next_id.y = next_id.y + step_dir.y;
        }
    }
    coordinate_compress(next_id, scale, bbox.max,  math) 
}


