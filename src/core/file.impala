extern "C" {
    fn sprintf(str: &[u8], format: &[u8], i: i32) -> ();
}

fn strcat(s1: &[u8], s2: &[u8]) -> [u8 * 99] {

    let mut res:[u8 * 99];
    let mut i = 0;
    while(s1(i) != '\0') {
        res(i) = s1(i); i++;
    }
    let n1 = i;
    i = 0;
    while(s2(i) != '\0') {
        res(i + n1) = s2(i); i++;
    }
    res(i + n1) = '\0';
    res
}

fn int_to_string(i: i32) -> [u8 * 5]{
    let mut str:[u8 * 5];
    sprintf(str, "%d", i);
    if i < 10 {
        str(2) = str(0);   
        str(1) = '0';
        str(0) = '0';
    } else if i < 100 {
        str(2) = str(1);
        str(1) = str(0);
        str(0) = '0';
    } else if i > 999 {
        print_string("Error: too much chunks");
    } 
    str(3) = '/';
    str(4) = '\0';
    str
}
struct File_path{
    bvh: [u8 * 99],
//tri mesh
    vertices: [u8 * 99], 
    normals:  [u8 * 99], 
    face_normals: [u8 * 99],
    texcoords: [u8 * 99], 
    indices: [u8 * 99],
//light
    light_ids: [u8 * 99],
    light_verts: [u8 * 99], 
    light_areas: [u8 * 99], 
    light_norms: [u8 * 99], 
    light_colors: [u8 * 99],
//material    
    simple_kd: [u8 * 99], 
    simple_ks: [u8 * 99],
    simple_ns: [u8 * 99]
}
fn make_file_path(dev_type: i32, chunk_rank: i32/*, chunk_size: i32*/) -> File_path {
    let data = "data/\0";

    let mut dev: [u8 * 5];
    let mut bvh: [u8 * 13];
    if dev_type == 0 {
        bvh = "bvh_nvvm.bin";
        dev = "gpu/";
    } else {
        if dev_type == 1 {
            bvh = "bvh_avx.bin\0";
        } else {
            bvh = "bvh_sse.bin\0";
        }
        dev = "cpu/";
    }
    
    let data_chunk     = strcat(data, int_to_string(chunk_rank));
    let data_dev       = strcat(data, dev);
    let data_chunk_dev = strcat(data_chunk, dev);
    
    File_path{
        bvh:          strcat(data_chunk, bvh), 
        vertices:     strcat(data_chunk_dev, "vertices.bin"),
        normals:      strcat(data_chunk_dev, "normals.bin"), 
        face_normals: strcat(data_chunk_dev, "face_normals.bin"),
        texcoords:    strcat(data_chunk_dev, "textcoords.bin"), 

        indices:      strcat(data_chunk, "indices.bin"),
        light_ids:    strcat(data_chunk, "light_ids.bin"),
        
        light_verts:  strcat(data_dev, "light_verts.bin"), 
        light_areas:  strcat(data_dev, "light_areas.bin"),
        light_norms:  strcat(data_dev, "light_normals.bin"),
        light_colors: strcat(data_dev, "light_colors.bin"),
     
        simple_kd:    strcat(data_chunk_dev, "simple_kd.bin"),
        simple_ks:    strcat(data_chunk_dev, "simple_ks.bin"),
        simple_ns:    strcat(data_chunk, "simple_ns.bin")
    }
}

